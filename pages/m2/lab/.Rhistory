View(dataTbl)
html_nodes(xpath='.table[2]') %>%
html_table()
t1data <-url%>%
html_nodes(xpath='.table[2]') %>%
html_table()
t1data <-url%>%
html_nodes("table") %>%
.[[2]] %>%
html_table()
View(t1data)
t1data <-url%>%
html_nodes("table") %>%
.[[1]] %>%
html_table()
t1data <-url%>%
html_nodes("table") %>%
.[[1]] %>%
html_table(fill=TRUE, header=TRUE)
View(t1data)
t1data <-url%>%
html_nodes("table") %>%
.[[3]] %>%
html_table(fill=TRUE, header=TRUE)
View(t1data)
t1data <-url%>%
html_nodes("table") %>%
.[[4]] %>%
html_table(fill=TRUE, header=TRUE)
t1data <-url%>%
html_nodes("table") %>%
.[[5]] %>%
html_table(fill=TRUE, header=TRUE)
View(t1data)
t1data <-url%>%
html_nodes("table") %>%
.[[6]] %>%
html_table(fill=TRUE, header=TRUE)
View(t1data)
t1data <-url%>%
html_nodes("table") %>%
.[[7]] %>%
html_table(fill=TRUE, header=TRUE)
t1data <-url%>%
html_nodes("table") %>%
.[[7]] %>%
html_table(fill=TRUE, header=TRUE)
t1data <-url%>%
html_nodes("table") %>%
.[[8]] %>%
html_table(fill=TRUE, header=TRUE)
View(t1data)
guess_encoding()
t1data <-url%>%
html_nodes("table") %>%
.[[8]] %>%
html_table(fill=TRUE, header=TRUE) %>%
guess_encoding()
View(t1data)
t1data <-url%>%
html_nodes("table") %>%
.[[8]] %>%
html_table(fill=TRUE, header=TRUE) %>%
repair_encoding()
repair_encoding()
t1data <-url%>%
repair_encoding()%>%
html_nodes("table") %>%
.[[8]] %>%
html_table(fill=TRUE, header=TRUE)
t1data <-url%>%
html_nodes("table") %>%
.[[8]] %>%
html_table(fill=TRUE, header=TRUE)
t1data<-repair_encoding(t1data)
t1data<-repair_encoding(as.raw(t1data))
is.raw(t1data)
is.vector(t1data)
is.list(t1data)
source("http://gking.harvard.edu/zelig/install.R")
q()
library(XLConnect)
## Load all necessary libraries
myWD<-getwd()
setwd("myWD")
library(xlsx)
library(stringi)
library(stringr)
library(plyr)
library(dplyr)
library(ggmap)
library(stringdist)
library(tidyr)
library(qdap)
library(data.table)
## Source necessary custom functions
source("src/func.R")
## Source cleaning file for lists
source("src/clean.R")
## Load all necessary libraries
myWD<-getwd()
setwd("myWD")
library(xlsx)
library(stringi)
library(stringr)
library(plyr)
library(dplyr)
library(ggmap)
library(stringdist)
library(tidyr)
library(qdap)
library(data.table)
## Source necessary custom functions
source("src/func.R")
## Source cleaning file for lists
source("src/clean.R")
## Load all necessary libraries
myWD<-getwd()
setwd("myWD")
library(xlsx)
library(stringi)
library(stringr)
library(plyr)
library(dplyr)
library(ggmap)
library(stringdist)
library(tidyr)
library(qdap)
library(data.table)
## Source necessary custom functions
source("src/func.R")
getwd()
library(wildlifeDI)
library(adehabitatHR)
library(rgeos)
install.packages("rgeos")
library(wildlifeDI)
library(adehabitatHR)
library(rgeos)
data(deer)
library(wildlifeDI)
?ltraj
?POSIXct
library(maptools)
library(spdep)
library(spgwr)
library(rgeos)
install.packages("proj")
install.packages("proj", type="source")
plot(cars)
plot(cars)
?include_graphics
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
library(knitr)
library(png)
knitr::include_graphics('./img/howscientist.png')
## Subset necessary fields
raw<-read.csv("https://docs.google.com/spreadsheets/d/1_otnWvOEi0AuVv5ETEwqbwTRY_32bch0PnlHlMGrIdE/pub?output=csv")
petrel<-subset(raw, select=c(event.id, timestamp, location.long, location.lat, tag.local.identifier))
## Attach proper names to the fields. Shorter the column name, less to type
names(petrel)<-c("eid", "timestamp", "long", "lat", "tagid")
petrel$timestamp<-as.POSIXct(strptime(petrel$timestamp, "%m/%d/%Y %H:%M:%S"))
## Split
petrel_split <- split(petrel, petrel$tagid)
new_names <- paste0('B',as.character(unique(petrel$tagid)))
for (i in 1:length(petrel_split)) {
assign(new_names[i], petrel_split[[i]])
}
cont<-readShapePoly("Continents/continent.shp", IDvar="CONTINENT")
library(wildlifeDI)
library(adehabitatHR)
library(rgeos)
library(ggplot2)
library(OpenStreetMap)
library(rgdal)
library(ggmap)
library(plyr)
## Subset necessary fields
raw<-read.csv("https://docs.google.com/spreadsheets/d/1_otnWvOEi0AuVv5ETEwqbwTRY_32bch0PnlHlMGrIdE/pub?output=csv")
petrel<-subset(raw, select=c(event.id, timestamp, location.long, location.lat, tag.local.identifier))
## Attach proper names to the fields. Shorter the column name, less to type
names(petrel)<-c("eid", "timestamp", "long", "lat", "tagid")
petrel$timestamp<-as.POSIXct(strptime(petrel$timestamp, "%m/%d/%Y %H:%M:%S"))
## Split
petrel_split <- split(petrel, petrel$tagid)
new_names <- paste0('B',as.character(unique(petrel$tagid)))
for (i in 1:length(petrel_split)) {
assign(new_names[i], petrel_split[[i]])
}
cont<-readShapePoly("Continents/continent.shp", IDvar="CONTINENT")
library(wildlifeDI)
library(adehabitatHR)
library(rgeos)
library(ggplot2)
library(OpenStreetMap)
library(rgdal)
library(ggmap)
library(plyr)
library(maptools)
## Subset necessary fields
raw<-read.csv("https://docs.google.com/spreadsheets/d/1_otnWvOEi0AuVv5ETEwqbwTRY_32bch0PnlHlMGrIdE/pub?output=csv")
petrel<-subset(raw, select=c(event.id, timestamp, location.long, location.lat, tag.local.identifier))
## Attach proper names to the fields. Shorter the column name, less to type
names(petrel)<-c("eid", "timestamp", "long", "lat", "tagid")
petrel$timestamp<-as.POSIXct(strptime(petrel$timestamp, "%m/%d/%Y %H:%M:%S"))
## Split
petrel_split <- split(petrel, petrel$tagid)
new_names <- paste0('B',as.character(unique(petrel$tagid)))
for (i in 1:length(petrel_split)) {
assign(new_names[i], petrel_split[[i]])
}
cont<-readShapePoly("Continents/continent.shp", IDvar="CONTINENT")
## Subset necessary fields
raw<-read.csv("https://docs.google.com/spreadsheets/d/1_otnWvOEi0AuVv5ETEwqbwTRY_32bch0PnlHlMGrIdE/pub?output=csv")
petrel<-subset(raw, select=c(event.id, timestamp, location.long, location.lat, tag.local.identifier))
## Attach proper names to the fields. Shorter the column name, less to type
names(petrel)<-c("eid", "timestamp", "long", "lat", "tagid")
petrel$timestamp<-as.POSIXct(strptime(petrel$timestamp, "%m/%d/%Y %H:%M:%S"))
## Split
petrel_split <- split(petrel, petrel$tagid)
new_names <- paste0('B',as.character(unique(petrel$tagid)))
for (i in 1:length(petrel_split)) {
assign(new_names[i], petrel_split[[i]])
}
cont<-readShapePoly("data/continent.shp", IDvar="CONTINENT")
ggplot() +
geom_polygon(data=cont, aes(x=long, y=lat, group=group))+
geom_point(data=petrel, aes(x=long, y=lat, group=bird), geom="polygon", fill="red", alpha=1/10, contour = T) +
coord_map("ortho", orientation = c(-50, 0, 0))
ggplot() +
geom_polygon(data=cont, aes(x=long, y=lat, group=group))+
geom_point(data=petrel, aes(x=long, y=lat, group=bird), fill="red", alpha=1/10) +
coord_map("ortho", orientation = c(-50, 0, 0))
## Subset necessary fields
raw<-read.csv("https://docs.google.com/spreadsheets/d/1_otnWvOEi0AuVv5ETEwqbwTRY_32bch0PnlHlMGrIdE/pub?output=csv")
petrel<-subset(raw, select=c(event.id, timestamp, location.long, location.lat, tag.local.identifier))
## Attach proper names to the fields. Shorter the column name, less to type
names(petrel)<-c("eid", "timestamp", "long", "lat", "tagid")
petrel$bird = as.factor(petrel$tagid)
petrel$timestamp<-as.POSIXct(strptime(petrel$timestamp, "%m/%d/%Y %H:%M:%S"))
## Split
petrel_split <- split(petrel, petrel$tagid)
new_names <- paste0('B',as.character(unique(petrel$tagid)))
for (i in 1:length(petrel_split)) {
assign(new_names[i], petrel_split[[i]])
}
cont<-readShapePoly("data/continent.shp", IDvar="CONTINENT")
ggplot() +
geom_polygon(data=cont, aes(x=long, y=lat, group=group))+
geom_point(data=petrel, aes(x=long, y=lat, group=bird), fill="red", alpha=1/10) +
coord_map("ortho", orientation = c(-50, 0, 0))
ggplot() +
geom_polygon(data=cont, aes(x=long, y=lat, group=group))+
geom_point(data=petrel, aes(x=long, y=lat, group=bird), color="red", size=0.5, alpha=1/10) +
coord_map("ortho", orientation = c(-50, 0, 0))
ggplot() +
geom_polygon(data=cont, aes(x=long, y=lat, group=group))+
geom_point(data=petrel, aes(x=long, y=lat, group=bird), color="red", size=0.5, alpha=1/10) +
coord_map("ortho", orientation = c(-50, 0, 0))
shp2008<-readShapePoly("data/parl2008/parl_precinct_2008.shp")
library(rgdal)
library(sp)
library(maptools)
shp2008<-readShapePoly("data/parl2008/parl_precinct_2008.shp")
library(rgdal)
library(sp)
library(maptools)
library(ggplot2)
library(rgdal)
library(sp)
library(maptools)
library(ggplot2)
suppressPackageStartupMessages()
shp2008<-readShapePoly("data/parl2008/parl_precinct_2008.shp")
names(shp2008)
shp2008<-readShapePoly("data/parl2008/parl_precinct_2008.shp")
shp2012<-readShapePoly("data/parl2012/parliamentary_precinct_2012.shp")
shp2016<-readShapePoly("data/parl2016/parl2016.shp")
library(rgdal)
library(sp)
library(maptools)
library(ggplot2)
library(rgdal)
library(sp)
library(raster)
library(rgeos)
library(maptools)
library(ggplot2)
sect8_12 <- intersect(shp2008, shop2012)
sect8_12 <- intersect(shp2008, shp2012)
sect8_12
ggplot+
geom_polygon(data=sect8_12, aes(x=x, y=y, group=group), fill=NA, contour=T, alpha=1/5)
ggplot+
geom_polygon(data=sect8_12, aes(x=x, y=y, group=group), fill=NA, alpha=1/5)
ggplot+
geom_polygon(data=sect8_12, aes(x=x, y=y, group=group))
ggplot(data=sect8_12, aes(x=x, y=y, group=group), fill=NA, alpha=1/5)
ggplot(data=sect8_12, aes(x=long, y=lat, group=group), fill=NA, alpha=1/5)+
geom_polygon()
ggplot(data=sect8_12, aes(x=long, y=lat, group=group), fill="red", alpha=1/5, size=0.5)+
geom_polygon()
sect8_12
names(sect8_12)
ggplot(data=sect8_12, aes(x=long, y=lat, group=nrow(sect8_12)), fill="red", alpha=1/5, size=0.5)+
geom_polygon()
ggplot(data=sect8_12, aes(x=long, y=lat, group=group), fill="red", alpha=1/5, size=0.5)+
geom_polygon()
knit_with_parameters('C:/Users/David/Desktop/test.Rmd', encoding = 'UTF-8')
library(leaflet)
library(htmltools)
rmarkdown::render_site
render_site
install.packages("tufte", type = "source")
library(tufte)
knit_with_parameters('D:/Dropbox/TSU/Housing/Reporting/05-2016-August/scientific_report/scientific_report.Rmd')
install.packages("devtools")
devtools::install_github("rstudio/bookdown")
library(bookdown)
install.packages("rprojroot")
citation()
citation(ggplot2)
citation(ggplot2)
citation(ggplot)
citation("ggplot2")
citation("sp")
citation("rgdal")
citation("gridExtra")
source("src/index.R")
source("src/index.R")
devtools::session_info('DT')
library(DT)
datatable(iris)
library(plotly)
install.packages(plotly)
install.packages("plotly")
library(plotly)
set.seed(100)
d <- diamonds[sample(nrow(diamonds), 1000), ]
plot_ly(d, x = ~carat, y = ~price, color = ~carat,
size = ~carat, text = ~paste("Clarity: ", clarity))
help(array)
a<-c(1, 2, 3, 4, 5)
b<-c(10, 20)
ab.array<-array((a, b), dim(3, 3, 2))
a<-c(1, 2, 3, 4, 5)
b<-c(10, 20)
ab.array<-array((a, b), dim=c(3, 3, 2))
a<-c(1, 2, 3, 4, 5)
b<-c(10, 20)
ab.array<-array(c(a, b), dim=c(3, 3, 2))
print(ab.array)
a<-c(1, 2)
b<-c(10, 20, 30, 40, 50, 60)
ab.array<-array(c(a, b), dim=c(3, 3, 2))
print(ab.array)
data(Galton)
library(mosaicData)
data(Galton)
names(Galton)
View(Galton)
table(Galton$family)
names(Galton)
data(Galton) # ბაზის გამოძახება და გააქტიურება
names(data) # ვნახოთ, რა ცვლადები მოიპოვება ამ ბაზაში
Galton$new.height <- Galton$height
Galton$new.height[Galton$new.height>180] <- 999
table(Galton$new.height)
View(Galton)
Galton$new.height[Galton$new.height>70] <- 999
table(Galton$new.height)
Galton$new.height[Galton$new.height==999 & Galton$new.height== 65] <- 777
table(Galton$new.height)
Galton$new.height[Galton$new.height==999 | Galton$new.height== 65] <- 777
table(Galton$new.height)
names(Galton)
plot(sex)
plot(Galton$sex)
plot(Galton$father)
plot(Galton$nkids)
plot(Galton$height)
rm(Galton)
data(Galton)
plot(Galton$height)
plot(Galton$height, Galton$mother)
plot(Galton$height, Galton$father)
plot(Galton$mother, Galton$father)
data("SAT")
names(SAT)
plot(expend)
plot(SAT$expend)
plot(SAT$expend, SAT$sat)
View(SAT)
plot(SAT$sat, type="o", col="blu")
plot(SAT$sat, type="o", col="blue")
?plot
plot(SAT$math, type="o", col="blue")
lines(SAT$verbal, type="o", pch=22, lty=2, col="red")
title(main="SAT ქულები", col.main="red", font.main=4)
lines(SAT$verbal, type="o", pch=22, col="red")
plot(SAT$math, type="o", col="blue", ylim=c(0, 600))
lines(SAT$verbal, type="o", pch=22, lty=2, col="red")
title(main="SAT ქულები", col.main="red", font.main=4)
plot(SAT$math, type="o", col="blue", ylim=c(400, 600))
lines(SAT$verbal, type="o", pch=22, lty=2, col="red")
title(main="SAT ქულები", col.main="red", font.main=4)
?font.main
??font.main
g_range <- range(0, SAT$verbal, SAT$math) # ავტომატურად გამოვთვალოთ y ღერძზე დასატანი მაქსიმალური და მინიმალური მნიშვნელობები
plot(SAT$verbal, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
View(SAT)
axis(1, at=1:5, lab=SAT$state) # x ღერძს გავუკეთოთ შტატის წარწერები
axis(1, at=1:50, lab=SAT$state) # x ღერძს გავუკეთოთ შტატის წარწერები
axis(2, las=1, at=4*0:g_range[2])
axis(2, las=1, at=100*0:g_range[2])
axis(1, at=1:50, lab=SAT$state) # x ღერძს გავუკეთოთ შტატის წარწერები
axis(2, las=1, at=100*0:g_range[2])
g_range <- range(0, SAT$verbal, SAT$math) # ავტომატურად გამოვთვალოთ y ღერძზე დასატანი მაქსიმალური და მინიმალური მნიშვნელობები
plot(SAT$verbal, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:50, lab=SAT$state) # x ღერძს გავუკეთოთ შტატის წარწერები
axis(2, las=1, at=100*0:g_range[2])
box()
lines(SAT$math, type="o", pch=22, lty=2, col="red")
title(xlab="შტატები", col.lab=rgb(0,0.5,0))
title(ylab="საშუალო ქულა", col.lab=rgb(0,0.5,0))
legend(1, g_range[2], c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
legend(0, g_range[2], c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
legend(1, g_range[2], c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
legend(1, g_range[2], c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
g_range <- range(0, SAT$verbal, SAT$math) # ავტომატურად გამოვთვალოთ y ღერძზე დასატანი მაქსიმალური და მინიმალური მნიშვნელობები
plot(SAT$verbal, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:50, lab=SAT$state) # x ღერძს გავუკეთოთ შტატის წარწერები
axis(2, las=1, at=100*0:g_range[2])
box()
lines(SAT$math, type="o", pch=22, lty=2, col="red")
title(xlab="შტატები", col.lab=rgb(0,0.5,0))
title(ylab="საშუალო ქულა", col.lab=rgb(0,0.5,0))
# დავიტანოთ ლეგენდა
legend(1, g_range[2], c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
g_range[2]
legend(1, 0, c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
legend(1, 300, c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
g_range <- range(0, SAT$verbal, SAT$math) # ავტომატურად გამოვთვალოთ y ღერძზე დასატანი მაქსიმალური და მინიმალური მნიშვნელობები
plot(SAT$verbal, type="o", col="blue", ylim=g_range,
axes=FALSE, ann=FALSE)
axis(1, at=1:50, lab=SAT$state) # x ღერძს გავუკეთოთ შტატის წარწერები
axis(2, las=1, at=100*0:g_range[2])
box()
lines(SAT$math, type="o", pch=22, lty=2, col="red")
title(xlab="შტატები", col.lab=rgb(0,0.5,0))
title(ylab="საშუალო ქულა", col.lab=rgb(0,0.5,0))
# დავიტანოთ ლეგენდა
legend(1, 300, c("ვერბალური","მათემატიკური"), cex=0.8,
col=c("blue","red"), pch=21:22, lty=1:2);
barplot(SAT$math)
library(mosaicData)
data(SAT)
View(SAT)
table(SAT$state)
library(png)
library(grid)
img <- readPNG("img/egh.gif")
bookdown:::serve_book()
install.packages('prophet')
library(prophet)
sessionInfo()
sessionInfo()
install.packages("swirl")
library(swirl)
swirl()
library(swirl)
install_course_github("kosukeimai", "qss-swirl")
swirl
swirl()
8-2
Sweave2knitr("lab1.Rnw")
library(knitr)
Sweave2knitr("lab1.Rnw")
Sweave2knitr("lab1.Rnw")
setwd("D:\\Dropbox\\My Projects\\Courses\\QT_Analysis\\meetings\\m01-intro\\lab")
Sweave2knitr("lab1.Rnw")
knitr("lab1-knitr.Rnw")
